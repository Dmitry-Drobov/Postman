{
	"info": {
		"_postman_id": "a1a9a004-ee01-4903-a451-b5f9a3b2b9db",
		"name": "Group_30_HW2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20528800"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/first\r",
							"// 1. Отправить запрос.\r",
							"\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.equal(\"This is the first responce from server!\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_3\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"let resp_name = jsonData.name\r",
							"let req = request.data\r",
							"let req_name = req.name;\r",
							"console.log(\"Name -- \", resp_name);\r",
							"\r",
							"pm.environment.set(\"name\", req_name);\r",
							"\r",
							"pm.test(\"name\", function(){\r",
							"    pm.expect(\"Milana\").to.eql(resp_name);\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"let resp_age = jsonData.age\r",
							"let req_age = req.age;\r",
							"console.log(\"Age -- \", resp_age);\r",
							"\r",
							"pm.environment.set(\"age\", req_age);\r",
							"\r",
							"pm.test(\"age\", function(){\r",
							"    pm.expect(\"40\").to.eql(resp_age);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"let resp_salary = jsonData.salary\r",
							"let req_salary = Number(req.salary);\r",
							"console.log(\"Salary -- \", resp_salary);\r",
							"\r",
							"pm.environment.set(\"salary\", req_salary);\r",
							"\r",
							"pm.test(\"salary\", function(){\r",
							"    pm.expect(2000).to.eql(resp_salary);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.environment.set(\"name\", req_name);\r",
							"\r",
							"pm.test(\"name2\", function(){\r",
							"    pm.expect(req_name).to.eql(resp_name);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.environment.set(\"age\", req_age);\r",
							"\r",
							"pm.test(\"age2\", function(){\r",
							"    pm.expect(req_age).to.eql(resp_age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.environment.set(\"salary\", req_salary);\r",
							"\r",
							"pm.test(\"salary2\", function(){\r",
							"    pm.expect(req_salary).to.eql(resp_salary);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"let family = jsonData.family\r",
							"console.log(\"Family: \", family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let u_salary_1_5_year = jsonData.family.u_salary_1_5_year\r",
							"let salary = req.salary;\r",
							"\r",
							"pm.test(\"Salary_equal\", function(){\r",
							"    pm.expect(u_salary_1_5_year).to.eql(salary*4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "40",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Milana",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_3\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let req1 = pm.request.url.query.toObject()\r",
							"// console.log(\"req1 = \", req1)\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let resp_name = jsonData.name\r",
							"let req = request.data\r",
							"let req_name = req.name;\r",
							"\r",
							"// pm.environment.set(\"name\", req_name);\r",
							"\r",
							"pm.test(\"name\", function(){\r",
							"    pm.expect(req_name).to.eql(resp_name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let resp_age = jsonData.age\r",
							"let req_age = req.age;\r",
							"// pm.environment.set(\"age\", req_age);\r",
							"\r",
							"pm.test(\"age2\", function(){\r",
							"    pm.expect(req_age).to.eql(resp_age);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let resp_salary = jsonData.salary\r",
							"let req_salary = req.salary;\r",
							"// pm.environment.set(\"salary\", req_salary);\r",
							"\r",
							"pm.test(\"salary2\", function(){\r",
							"    pm.expect(req_salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"let family = jsonData.family\r",
							"console.log(\"Family: \", family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Check name\", function(){\r",
							"    pm.expect(JSON.stringify(jsonData.family.pets.dog)).to.include(\"name\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Check age\", function(){\r",
							"    pm.expect(JSON.stringify(jsonData.family.pets.dog)).to.include(\"age\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"let dog_name = jsonData.family.pets.dog.name;\r",
							"pm.test(\"Dog's name\", function(){\r",
							"    pm.expect(dog_name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"let dog_age = jsonData.family.pets.dog.age;\r",
							"pm.test(\"Dog's age\", function(){\r",
							"    pm.expect(dog_age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Milana&age=40&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Milana"
						},
						{
							"key": "age",
							"value": "40"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_4\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let req1 = pm.request.url.query.toObject()\r",
							"// console.log(\"req1 = \", req1)\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let resp_name = jsonData.name\r",
							"let req = request.data\r",
							"let req_name = req.name;\r",
							"// console.log(\"Name -- \", resp_name);\r",
							"// pm.environment.set(\"name\", req_name);\r",
							"pm.test(\"name\", function(){\r",
							"    pm.expect(req_name).to.eql(resp_name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"let resp_age = jsonData.age\r",
							"let req_age = req.age;\r",
							"// console.log(\"Age -- \", resp_age);\r",
							"// pm.environment.set(\"age\", req_age);\r",
							"pm.test(\"age\", function(){\r",
							"    pm.expect(req_age).to.eql(resp_age);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"\r",
							"\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"let salary = jsonData.salary\r",
							"console.log(\"Salary: \", salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(salary[0])\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(salary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(salary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"// pm.environment.set(\"salary\", req_salary);\r",
							"let req_salary = req.salary;\r",
							"pm.test(\"Salary equal\", function(){\r",
							"    pm.expect(req_salary).to.eql(salary[0]);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Salary equal 1\", function(){\r",
							"    pm.expect(req_salary*2).to.eql(salary[1]);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Salary equal 2\", function(){\r",
							"    pm.expect(req_salary*3).to.eql(salary[2]);\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"pm.environment.set(\"name\", \"\");\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"pm.environment.set(\"age\", \"\");\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\", \"\");\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", req_name);\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", req_age);\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", req_salary);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"// for (i = 0; i < jsonData.salary.length; i++){\r",
							"//     console.log(salary[i])\r",
							"// }\r",
							"salary.forEach(el => \r",
							"console.log(el))"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Milana&age=40&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Milana"
						},
						{
							"key": "age",
							"value": "40"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_2\r",
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"// const responseJson = pm.response.json();\r",
							"pm.test(\"Body contains string (start)\",() => {\r",
							"  pm.expect(pm.response.text()).to.include(\"start_qa_salary\");\r",
							"});\r",
							"pm.test(\"Check start qa salary\", function(){\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"start_qa_salary\")\r",
							"})\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Body contains string (6m)\",() => {\r",
							"  pm.expect(pm.response.text()).to.include(\"qa_salary_after_6_months\");\r",
							"});\r",
							"pm.test(\"Check qa 6m\", function(){\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"qa_salary_after_6_months\")\r",
							"})\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Body contains string (12m)\",() => {\r",
							"  pm.expect(pm.response.text()).to.include(\"qa_salary_after_12_months\");\r",
							"});\r",
							"pm.test(\"Check qa 12m\", function(){\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"qa_salary_after_12_months\")\r",
							"})\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Body contains string (1.5y)\",() => {\r",
							"  pm.expect(pm.response.text()).to.include(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"pm.test(\"Check qa 1.5y\", function(){\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"qa_salary_after_1.5_year\")\r",
							"})\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Body contains string (3.5y)\",() => {\r",
							"  pm.expect(pm.response.text()).to.include(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"pm.test(\"Check qa 3.5y\", function(){\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"qa_salary_after_3.5_year\")\r",
							"})\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Body contains string (person)\",() => {\r",
							"  pm.expect(pm.response.text()).to.include(\"person\");\r",
							"});\r",
							"pm.test(\"Check person\", function(){\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"person\")\r",
							"})\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"let resp_salary_start = jsonData.start_qa_salary\r",
							"let req = request.data\r",
							"let req_salary = Number(req.salary);\r",
							"// pm.environment.set(\"salary\", req_salary)\r",
							"pm.test(\"salary start\", function(){\r",
							"    pm.expect(resp_salary_start).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"let resp_salary_6m = jsonData.qa_salary_after_6_months\r",
							"pm.test(\"Salary equal 6\", function(){\r",
							"    pm.expect(resp_salary_6m).to.eql(req_salary *2);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"let resp_salary_12m = jsonData.qa_salary_after_12_months\r",
							"pm.test(\"Salary equal 12\", function(){\r",
							"    pm.expect(resp_salary_12m).to.eql(req_salary *2.7);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"let resp_salary_1_5y = jsonData['qa_salary_after_1.5_year']\r",
							"pm.test(\"Salary equal 1.5y\", function(){\r",
							"    pm.expect(resp_salary_1_5y).to.eql(req_salary *3.3);\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"let resp_salary_3_5y = jsonData['qa_salary_after_3.5_years']\r",
							"pm.test(\"Salary equal 3.5y\", function(){\r",
							"    pm.expect(resp_salary_3_5y).to.eql(req_salary *3.8);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"let u_name = jsonData.person.u_name;\r",
							"pm.test(\"salary equal 1el\", function(){\r",
							"    pm.expect(u_name[1]).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"let u_age = jsonData.person.u_age;\r",
							"let req_age = Number(req.age)\r",
							"pm.test(\"u_age equal\", function(){\r",
							"    pm.expect(u_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"let resp_salary_5y = jsonData.person.u_salary_5_years\r",
							"pm.test(\"salary 5y equal\", function(){\r",
							"    pm.expect(resp_salary_5y).to.eql(req_salary * 4.2);\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"// let person = jsonData.person\r",
							"// person.forEach(el => \r",
							"// console.log(el))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "40",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Milana",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}